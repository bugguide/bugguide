<?php

/**
 * @file
 * The bgstat module provides statistical insight into BugGuide.
 */

/**
 * Implementation of hook_menu().
 */
function bgstat_menu() {
  $items['stats'] = array(
    'title' => 'BugGuide Statistics',
    'description' => 'Special data mining queries',
    'page callback' => '_bgstat_get_html_statistics_page',
    'access arguments' => array('access content'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/reports/bgstat/nodes_by_user'] = array(
    'title' => 'Nodes by user',
    'description' => 'Nodes by user, descending. Add /nodetype/numberofrecords to URL.',
    'page callback' => 'bgstat_nodes_by_user',
    'access arguments' => array('access bgstats'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/bgstat/comments_by_user'] = array(
    'title' => 'Comments by user',
    'description' => 'Comments by user, descending',
    'page callback' => 'bgstat_comments_by_user',
    'access arguments' => array('access bgstats'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/bgstat/logins'] = array(
    'title' => 'Login statistics',
    'description' => 'Mine the watchdog to build list of users with actual login events.',
    'page callback' => 'bgstat_logins',
    'access arguments' => array('access bgstats'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bgstat_permission() {
  return array(
    'access bgstats' => array(
      'title' => t('View badges denoting privileged roles'),
      'description' => t('Make visible which other users have enhanced privileges.'),
    ),
    'administer bg utilities' => array(
      'title' => t('Administer bg utilities'),
      'description' => t('Perform bg maintenance tasks'),
    )
  );
}

function bgstat_nodes_by_user($node_type = 'all', $limit = 50) {
  // Sanitize input.
  if (!in_array($node_type, array('bgimage', 'bgpage', 'forum', 'bglink', 'book_reference'))) {
    $node_type = 'all';
  }
  $limit = (int) $limit;
  if (($limit) == 0) {
    return '';
  }

  if ($node_type == 'all') {
    $result = db_query_range("SELECT u.name, COUNT(n.nid) AS nodes FROM {node} n JOIN {users_current} u ON n.uid = u.uid WHERE n.type IN ('bgimage', 'bgpage', 'forum', 'bglink', 'book_reference') GROUP BY n.uid ORDER BY nodes DESC", $node_type, 0, $limit);
  }
  else {
    $result = db_query_range("SELECT u.name, COUNT(n.nid) AS nodes FROM {node} n JOIN {users_current} u ON n.uid = u.uid WHERE type='%s' GROUP BY n.uid ORDER BY nodes DESC", $node_type, 0, $limit);
  }

  $output = "User\tCount\r";
  while ($data = db_fetch_object($result)) {
    $output .= $data->name . "\t" . $data->nodes . "\r";
  }
  drupal_set_header('Content-Type: text/ascii; utf-8');
  print $output;
  module_invoke_all('exit');
}

function bgstat_comments_by_user($limit = 50) {
  // Sanitize input.
  $limit = (int) $limit;
  if (($limit) == 0) {
    return '';
  }

  $users = array();

  // All time
  $result = db_query_range("SELECT u.name, u.uid, COUNT(c.cid) AS comments FROM {comment} c JOIN {users} u ON c.uid = u.uid GROUP BY c.uid ORDER BY comments DESC", 0, $limit);

  $output = "All Time:\r";
  $output .= "User\tCount\r";
  foreach ($result as $data) {
    $output .= $data->name . "\t" . $data->comments . "\r";
    $users[$data->uid] = array(
      'all' => $data->comments,
      'name' => $data->name,
    );
  }

  $five_years_ago = strtotime('-5 years');
  $result = db_query_range("SELECT u.name, u.uid, COUNT(c.cid) AS comments FROM {comment} c JOIN {users} u ON c.uid = u.uid WHERE c.created > $five_years_ago GROUP BY c.uid ORDER BY comments DESC", 0, $limit);
  $output .= "\rLast Five Years:\r";
  $output .= "User\tCount\r";
  foreach ($result as $data) {
    $output .= $data->name . "\t" . $data->comments . "\r";
    $users[$data->uid]['five'] = $data->comments;
    if (!isset($users[$data->uid]['name'])) {
      $users[$data->uid]['name'] = $data->name;
    }
  }

  $one_year_ago = strtotime('-1 years');
  $result = db_query_range("SELECT u.name, u.uid, COUNT(c.cid) AS comments FROM {comment} c JOIN {users} u ON c.uid = u.uid WHERE c.created > $one_year_ago GROUP BY c.uid ORDER BY comments DESC", 0, $limit);
  $output .= "\rLast One Year:\r";
  $output .= "User\tCount\r";
  foreach ($result as $data) {
    $output .= $data->name . "\t" . $data->comments . "\r";
    $users[$data->uid]['one'] = $data->comments;
    if (!isset($users[$data->uid]['name'])) {
      $users[$data->uid]['name'] = $data->name;
    }
  }

  $output .= "\rUser History";
  // Now a report for all users that made the top 50 in all, last 5, or last 1 year
  foreach ($users as $uid => $u) {
    $years = array(5,4,3,2,1);
    foreach ($years as $years_ago ) {
      $low = strtotime('-' . $years_ago . ' years');
      $high = strtotime('-' . $years_ago + 1 . ' years');
      //print "SELECT COUNT(c.cid) as comments from comment c WHERE c.uid = $uid AND c.created > $low AND c.created < $high)\r";
      $result = db_query("SELECT COUNT(c.cid) AS comments FROM {comment} c WHERE c.uid = :uid AND c.created > :low AND c.created < :high", array(':uid' => $uid, ':low' => $low, ':high' => $high))->fetchObject();
      //print "$low $high $result->comments \r";
      $users[$uid][$years_ago] =  $result->comments;
    }

    $result = db_query("SELECT ur.uid, ur.rid, r.name FROM {users_roles} ur JOIN {role} r ON ur.rid = r.rid WHERE ur.uid = :uid", array(':uid' => $uid))->fetchObject();
    $users[$uid]['role'] = $result->name;
  }

  foreach ($users as $uid => $u) {
    $output .= $uid . "," . $u['role'] . "," . $u['name'];
    foreach ($years as $years_ago) {
      $output .= "," . $u[$years_ago];
    }
    $output .= "\r";
  }

  drupal_add_http_header('Content-Type: text/ascii; utf-8');
  print $output;
  module_invoke_all('exit');
}

function bgstat_logins() {
  //$result = db_query("");

  $output = 'Not yet implemented.';

  drupal_set_header('Content-Type: text/ascii; utf-8');
  print $output;
  module_invoke_all('exit');
}

/**
 * Implements hook_node_view().
 *
 * Add statics page from BugGuide.
 */
function bgstat_node_view($node, $view_mode, $langcode) {

  // Statistics page.
  if ($view_mode === 'full' && $node->nid === '11181') {
    $node->content['body'][0]['#markup'] .= _bgstat_get_html_statistics_page();
  }
}

/**
 * Get html statistics page.
 *
 * @return string
 *   Html statistic page.
 */
function _bgstat_get_html_statistics_page() {

  $html = "<p>The following statistics are generated in real time.</p>";

  $now = time();
  $weekago = $now - (60 * 60 * 24 * 7);
  $contributorCount = db_query("SELECT COUNT(DISTINCT uid) FROM (SELECT uid FROM node UNION ALL SELECT uid FROM comment) as foo")->fetchField();
  $editorCount = db_query("select count(*) from users u join users_roles r on r.uid = u.uid where u.status = 1 and ((r.rid = 5) or u.uid = 1)")->fetchField();
  $expertCount = db_query("select count(*) from users u join users_roles r on r.uid = u.uid where u.status = 1 and ((r.rid = 8) or u.uid = 1)")->fetchField();
  $totalUserCount = $contributorCount + $editorCount + $expertCount;
  $activeUserCount = db_query("select count(*) from {users} where status = 1 and created > $weekago")->fetchField();

  $html .= "<b>Users</b><ul>";
  $html .= "<li>Contributors: $contributorCount (counts anyone who has ever submitted content or comment)</li>";
  $html .= "<li>Editors: $editorCount</li>";
  $html .= "<li>Experts: $expertCount</li>";
  $html .= "<li>Total: $totalUserCount</li>";
  $html .= "<li>Active: $activeUserCount (within the past 7 days)</li>";
  $html .= "</ul>";

  $guideImageCount = db_query("SELECT count(*) FROM {node} n, {bgimage} t WHERE t.nid = n.nid AND n.type = 'bgimage' AND n.status = '1' and t.parent not in ('6','9410')")->fetchField();
  $idRequestImageCount = db_query("SELECT count(*) FROM {node} n, {bgimage} t WHERE t.nid = n.nid AND n.type = 'bgimage' AND n.status = '1' and t.parent='6'")->fetchField();
  $frassImageCount = db_query("SELECT count(*) FROM {node} n, {bgimage} t WHERE t.nid = n.nid AND n.type = 'bgimage' AND n.status = '1' and t.parent='9410'")->fetchField();
  $totalImageCount = $guideImageCount + $idRequestImageCount + $frassImageCount;

  $html .= "<b>Images</b><ul>";
  $html .= "<li>Guide: $guideImageCount</li>";
  $html .= "<li>ID Request: $idRequestImageCount</li>";
  $html .= "<li>Frass: $frassImageCount</li>";
  $html .= "<li>Total: $totalImageCount</li>";
  $html .= "</ul>";

  $orderPageCount = db_query("SELECT count(*) FROM {field_data_field_taxon} p WHERE field_taxon_value = 2300")->fetchField();
  $familyPageCount = db_query("SELECT count(*) FROM {field_data_field_taxon} p WHERE field_taxon_value = 2700")->fetchField();
  $genusPageCount = db_query("SELECT count(*) FROM {field_data_field_taxon} p WHERE field_taxon_value = 3300")->fetchField();
  $speciesPageCount = db_query("SELECT count(*) FROM {field_data_field_taxon} p WHERE field_taxon_value = 3400")->fetchField();
  $guidePageCount = db_query("SELECT count(*) FROM {node} n JOIN {field_data_field_taxon} t ON  t.entity_id = n.nid WHERE n.type = 'bgpage' AND n.status = 1")->fetchField();
  $bookCount = db_query("SELECT count(*) FROM {node} n WHERE n.type = 'book_reference' AND n.status = 1")->fetchField();
  $linkCount = db_query("SELECT count(*) FROM {node} n WHERE n.type = 'bglink' AND n.status = 1")->fetchField();

  $html .= "<b>Guide</b><ul>";
  $html .= "<li>Order Pages: $orderPageCount</li>";
  $html .= "<li>Family Pages: $familyPageCount</li>";
  $html .= "<li>Genus Pages: $genusPageCount</li>";
  $html .= "<li>Species Pages: $speciesPageCount</li>";
  $html .= "<li>Total Pages: $guidePageCount</li>";
  $html .= "<li>Images: $guideImageCount</li>";
  $html .= "<li>Books: $bookCount</li>";
  $html .= "<li>Links: $linkCount</li>";
  $html .= "</ul>";

  // Should just use $LOCATION_CODES from includes/globals.inc but
  // that doesn't seem to work from here.
  //include_once "includes/globals.inc";

  $LOCATION_CODES[''] = 'Unknown';
  $LOCATION_CODES['AL'] = 'Alabama';
  $LOCATION_CODES['AK'] = 'Alaska';
  $LOCATION_CODES['AB'] = 'Alberta';
  $LOCATION_CODES['AZ'] = 'Arizona';
  $LOCATION_CODES['AR'] = 'Arkansas';
  $LOCATION_CODES['BC'] = 'British Columbia';
  $LOCATION_CODES['CA'] = 'California';
  $LOCATION_CODES['CO'] = 'Colorado';
  $LOCATION_CODES['CT'] = 'Connecticut';
  $LOCATION_CODES['DE'] = 'Delaware';
  $LOCATION_CODES['DC'] = 'District of Columbia';
  $LOCATION_CODES['FL'] = 'Florida';
  $LOCATION_CODES['GA'] = 'Georgia';
  $LOCATION_CODES['HI'] = 'Hawaii';
  $LOCATION_CODES['ID'] = 'Idaho';
  $LOCATION_CODES['IL'] = 'Illinois';
  $LOCATION_CODES['IN'] = 'Indiana';
  $LOCATION_CODES['IA'] = 'Iowa';
  $LOCATION_CODES['KS'] = 'Kansas';
  $LOCATION_CODES['KY'] = 'Kentucky';
  $LOCATION_CODES['LA'] = 'Louisiana';
  $LOCATION_CODES['ME'] = 'Maine';
  $LOCATION_CODES['MB'] = 'Manitoba';
  $LOCATION_CODES['MD'] = 'Maryland';
  $LOCATION_CODES['MA'] = 'Massachusetts';
  $LOCATION_CODES['MI'] = 'Michigan';
  $LOCATION_CODES['MN'] = 'Minnesota';
  $LOCATION_CODES['MS'] = 'Mississippi';
  $LOCATION_CODES['MO'] = 'Missouri';
  $LOCATION_CODES['MT'] = 'Montana';
  $LOCATION_CODES['NE'] = 'Nebraska';
  $LOCATION_CODES['NV'] = 'Nevada';
  $LOCATION_CODES['NB'] = 'New Brunswick';
  $LOCATION_CODES['NH'] = 'New Hampshire';
  $LOCATION_CODES['NJ'] = 'New Jersey';
  $LOCATION_CODES['NM'] = 'New Mexico';
  $LOCATION_CODES['NY'] = 'New York';
  $LOCATION_CODES['NL'] = 'Newfoundland/Labrador';
  $LOCATION_CODES['NC'] = 'North Carolina';
  $LOCATION_CODES['ND'] = 'North Dakota';
  $LOCATION_CODES['NT'] = 'Northwest Territories';
  $LOCATION_CODES['NS'] = 'Nova Scotia';
  $LOCATION_CODES['NU'] = 'Nunavut';
  $LOCATION_CODES['OH'] = 'Ohio';
  $LOCATION_CODES['OK'] = 'Oklahoma';
  $LOCATION_CODES['ON'] = 'Ontario';
  $LOCATION_CODES['OR'] = 'Oregon';
  $LOCATION_CODES['PA'] = 'Pennsylvania';
  $LOCATION_CODES['PE'] = 'Prince Edward Island';
  $LOCATION_CODES['QC'] = 'Quebec';
  $LOCATION_CODES['RI'] = 'Rhode Island';
  $LOCATION_CODES['SK'] = 'Saskatchewan';
  $LOCATION_CODES['SC'] = 'South Carolina';
  $LOCATION_CODES['SD'] = 'South Dakota';
  $LOCATION_CODES['TN'] = 'Tennessee';
  $LOCATION_CODES['TX'] = 'Texas';
  $LOCATION_CODES['UT'] = 'Utah';
  $LOCATION_CODES['VT'] = 'Vermont';
  $LOCATION_CODES['VA'] = 'Virginia';
  $LOCATION_CODES['WA'] = 'Washington';
  $LOCATION_CODES['WV'] = 'West Virginia';
  $LOCATION_CODES['WI'] = 'Wisconsin';
  $LOCATION_CODES['WY'] = 'Wyoming';
  $LOCATION_CODES['YT'] = 'Yukon Territory';


  $html .= "<table><tr><th>Location</th><th>Images</th><th>Percentage</th></tr>";

  foreach ($LOCATION_CODES as $abbrev => $name) {
    $count = db_query("SELECT COUNT(*) FROM {bgimage} WHERE location_code = :location_code", array(':location_code' => $abbrev))->fetchField();
    if ($count) {
      $percentage = number_format(($count/$totalImageCount) * 100, 1);
    }
    else {
      $percentage = "0";
    }
    $html .= "<tr><td>$name</td><td align='right'>" . $count . "<td align='right'>" . $percentage . "</td></tr>";
  }
  $html .= "</table>";

  $taxa = array(
    'Order Microcoryphia - Bristletails' => '^3,878075,52,80',
    'Order Zygentoma - Silverfish' => '^3,878075,52,79',
    'Order Ephemeroptera - Mayflies' => '^3,878075,52,78',
    'Order Odonata - Dragonflies and Damselflies' => '^3,878075,52,77',
    'Order Plecoptera - Stoneflies' => '^3,878075,52,76',
    'Order Embiidina - Webspinners' => '^3,878075,52,16969',
    'Order Phasmida - Walkingsticks' => '^3,878075,52,74',
    'Order Orthoptera - Grasshoppers, Crickets, Katydids' => '^3,878075,52,73',
    'Order Notoptera - Rock Crawlers' => '^3,878075,52,244862',
    'Order Dermaptera - Earwigs' => '^3,878075,52,2709',
    'Order Mantodea - Mantids' => '^3,878075,52,342391',
    'Order Blattodea - Cockroaches and Termites' => '^3,878075,52,342386',
    'Order Zoraptera - Zorapterans' => '^3,878075,52,41371',
    'Order Psocodea - Barklice, Booklice, and Parasitic Lice' => '^3,878075,52,67',
    'Order Hemiptera - True Bugs, Cicadas, Hoppers, Aphids and Allies' => '^3,878075,52,63',
    'Order Thysanoptera - Thrips' => '^3,878075,52,7754',
    'Order Megaloptera - Alderflies, Dobsonflies, and Fishflies' => '^3,878075,52,233428',
    'Order Raphidioptera - Snakeflies' => '^3,878075,52,233370',
    'Order Neuroptera - Antlions, Lacewings and Allies' => '^3,878075,52,61',
    'Order Coleoptera - Beetles' => '^3,878075,52,60',
    'Order Hymenoptera - Ants, Bees, Wasps and Sawflies' => '^3,878075,52,59',
    'Order Trichoptera - Caddisflies' => '^3,878075,52,5233',
    'Order Lepidoptera - Butterflies and Moths' => '^3,878075,52,57',
    'Order Mecoptera - Scorpionflies, Hangingflies and Allies' => '^3,878075,52,56',
    'Order Diptera - Flies' => '^3,878075,52,55',
    'Order Diptera - Flies (Nematocera only)' => '^3,878075,52,55,14927',
    'Order Strepsiptera - Twisted-winged Insects' => '^3,878075,52,9667',
    'Order Siphonaptera - Fleas' => '^3,878075,52,7040',
    'Order Protorthoptera' => '^3,878075,52,317568',
  );

  $html .= "<table><tr><th>Taxon</th><th>Image Count</th></tr>";
  foreach ($taxa as $taxon => $parent) {
    $count = db_query("SELECT COUNT(nid) FROM {bgimage} WHERE parent_idx REGEXP '$parent'")->fetchField();
    $html .= "<tr><td>$taxon</td><td>$count</td></tr>";
  }
  $html .= "</table>";

  $html .= "<table><tr><th>User</th><th>Number of Images</th></tr>";
  $query = db_query("SELECT COUNT(n.nid) as c, u.name FROM node n JOIN users u ON n.uid = u.uid WHERE type = 'bgimage' GROUP BY u.uid ORDER BY c DESC LIMIT 0, 100");
  $result = $query->fetchAll();
  foreach ($result as $data) {
    $html .= "<tr><td>$data->name</td><td>$data->c</td></tr>";
  }
  $html .= "</table>";

  $html .= "<table><tr><th>Month</th><th>Number of Images</th></tr>";
  $query = db_query("SELECT DISTINCT FROM_UNIXTIME(created, '%M %Y') AS month, count(*) AS ct FROM node WHERE type = 'bgimage' GROUP BY month ORDER BY created DESC");
  $result = $query->fetchAll();
  foreach ($result as $data) {
    $html .= "<tr><td>$data->month</td><td>$data->ct</td></tr>";
  }
  $html .= "</table>";
  return $html;
}


<?php

include_once 'bg.features.inc';

// Define the following constants in the guide-specific module.
// E.g., for bugguide, in bugguide.module.
// Node ID of ID Request
// define('BG_ID_REQUEST_NID', 6);

// Node ID of Frass
// define('BG_FRASS_NID', 9410);

/**
 * @file
 * The bg module provides bugguide-specific functionality.
 */

/**
 * Implementation of hook_theme().
 */
function bg_theme() {
  $module_path = drupal_get_path('module', 'bg');
  return array(
    'bg_fixup_locations_table' => array(
      'render element' => 'form',
    ),
    'bg_top_links' => array(
      'template' => 'top-links',
      'path' => $module_path . '/templates',
    ),
    'bg_visual_guide' => array(
      'template' => 'visual-guide',
      'path' => $module_path . '/templates',
    )
  );
}

/**
 * Implements hook_menu().
 */
function bg_menu() {
  $items['bg'] = array(
    'title' => 'Utilities',
    'description' => 'BugGuide system utilities',
    'page callback' => 'bg_utilities',
    'access arguments' => array('administer bg utilities'),
    'expanded' => 1,
    'file' => 'bg.admin.inc',
  );
  $items['bg/orphans'] = array(
    'title' => 'Show orphaned nodes',
    'description' => 'Shows pages, images, links, and references with no parent',
    'page callback' => 'bg_orphans',
    'access arguments' => array('administer bg utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/badlocations'] = array(
    'title' => 'Images with error: country name in county field',
    'description' => 'Shows images that have country names in county field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bg_fixup_locations_form'),
    'access arguments' => array('administer bg utilities'),
    'file' => 'bg.admin.inc',
  );

  $items['bg/lepstage'] = array(
    'title' => 'Show stageless Leps',
    'description' => 'Shows Lepidoptera that have not been marked adult or immature',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bg_stageless_leps'),
    'access arguments' => array('administer bg utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/blankhodges'] = array(
    'title' => 'Show Lepidopterans without Hodges #',
    'description' => 'Shows Lepidoptera that have not been assigned a Hodges number',
    'page callback' => 'bg_blank_hodges',
    'access arguments' => array('administer bg utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/fixup-stage'] = array(
    'title' => 'Fixup stage - bgimage',
    'description' => 'Fixup stage - from adult and immature',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bugguide_fixup_stage_form'),
    'access arguments' => array('administer bg utilities'),
    'file' => 'bg.admin.inc',
  );

  return $items;
}

/**
 * Place Forums menu exactly.
 */
function bg_menu_alter(&$items) {
  $items['forum']['weight'] = 5;
}

/**
 * Implements hook_date_formats().
 */
function bg_date_formats() {
  return array(
    array(
      'type' => 'bg_short_F_j_Y',
      'format' => 'F j, Y',
      'locales' => array(),
    ),
  );
}
/**
 * Implements hook_date_format_types().
 */
function bg_date_format_types() {
  return array(
    'bg_short_F_j_Y' => t('Short: F j, Y'),
  );
}

/**
 * Implements hook_permission().
 */
function bg_permission() {
  return array(
    'view badges' => array(
      'title' => t('View badges denoting privileged roles'),
      'description' => t('Make visible which other users have enhanced privileges.'),
    ),
    'administer bg utilities' => array(
      'title' => t('Administer bg utilities'),
      'description' => t('Perform bg maintenance tasks'),
    )
  );
}

/**
 * Implements hook_filter_info().
 */
function bg_filter_info() {
  $filters['bg_list'] = array(
    'title' => t('List item filter'),
    'description' => t('Every line that starts with a + will be converted into a list item.'),
    'process callback'  => '_bg_filter_list_item_process',
  );
  return $filters;
}

/**
 * BG list item filter process callback.
 */
function _bg_filter_list_item_process($text, $filter, $format) {
  return preg_replace('/^\+(.+)$/mi', '<div class="bgpage-bullet">$1</div>', $text);
}

/**
 * Determine if a string ends with a substring
 *
 * @param string $str
 * @param string $sub
 * @return string
 */
function bg_str_ends_with($str, $sub) {
  return substr( $str, strlen( $str ) - strlen( $sub ) ) == $sub;
}

/**
 * Build a one-line taxonomic linked breadcrumb.
 *
 * @param object $node
 *   A node.
 * @param string $guidebc
 *   Defines which format to use to render each taxon name (common, scientific or both).
 *   This is a field on the user entity which users choose by editing their profile.
 * @param string $type
 *   The link type of breadcrumbs desired: tree, bgpage, info, bgimage, bglink,
 *   bgref, bgmap, or '' - '' can only be used if $json is TRUE ($type and $json
 *   are mutually exclusive parameters).
 * @param integer $from
 *   If the breadcrumb should not start at Home / Guide then specify the nid of
 *   the taxon it should start from.
 * @param boolean $json
 *   Return a taxon_name => taxon_value array instead of links if true.
 * @return array of links with title and href, where each link is of the specified $type.
 */
function bg_create_taxonomic_breadcrumb($node, $type = 'info', $guidebc = 'Scientific name (Common name)', $from = NULL, $json = FALSE) {
  global $TAXON_NAMES;
  global $TAXON_IDS;

  // If the node has no parent field a taxonomic breadcrumb is not sane.
  if (!isset($node->field_parent[LANGUAGE_NONE][0]['value'])) {
    return array();
  }

  $bc = array();
  if (!$from ) {
    $bc[] = l('Home', '');
  }

  if ($json) {
    $json_array = array();
  }

  $nids = array($node->nid);
  $parent_nids = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
  $nids = array_merge($parent_nids, $nids);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'bgpage')
    ->propertyCondition('nid', $nids, 'IN')
    ->fieldOrderBy('field_taxon', 'value', 'ASC');
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    $link_type = $type == 'info' ? '' : '/' . $type;

    $start_building = $from ? FALSE : TRUE;
    foreach($nodes as $parent_node) {
      if (!$start_building) {
        if ($parent_node->nid == $from) {
          $start_building = TRUE;
        }
        else {
          continue;
        }
      }

      // Common name is the node title.
      $common = $parent_node->title;

      // What level of hierarchy we're at
      if (!empty($parent_node->field_taxon) && isset($TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']])) {
        $taxon = $TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']];
      }
      else {
        $taxon = t('No Taxon');
      }

      // We only look at the format when the node has a scientific name.
      $scientific_name = !empty($parent_node->field_scientific_name) ? $parent_node->field_scientific_name[LANGUAGE_NONE][0]['value'] : '';
      if (!empty($scientific_name)) {

        // If we are building the name for the species, include Genus name in
        // breadcrumb. Don't do this for $json.
        // Do this:  ... / Muscini / Musca / Musca domestica (House Fly)
        // Not this: ... / Muscini / Musca / domestica (House Fly)
        if ($taxon == 'Species' && !$json) {
          // We are rendering, e.g., domestica and we need the Musca in Musca domestica.
          // A parent of this node has it and we already loaded it in $nodes,
          // which we are currently looping through. Peek into the scientific
          // name field of a parent in order to get the genus name and prepend.
          // Caution: do not assume that the immediate parent is a genus; see node/162470
          // Go back up the tree looking for a genus. When we find one, grab
          // the genus name.
          $reverse_nids = array_reverse($nids);
          foreach ($reverse_nids as $rnid) {
            if (!empty($nodes[$rnid]->{'field_taxon'}) &&
                isset($nodes[$rnid]->{'field_taxon'}[LANGUAGE_NONE][0]['value']) &&
                $nodes[$rnid]->{'field_taxon'}[LANGUAGE_NONE][0]['value'] == $TAXON_IDS['Genus']) {
              // Found a genus.
              $scientific_name = $nodes[$rnid]->{'field_scientific_name'}[LANGUAGE_NONE][0]['value'] . ' ' . $scientific_name;
            }
          }
        }

        if ($guidebc == 'Scientific name') {
          $linktext = $scientific_name;
        }
        else if ($guidebc == 'Common name') {
          $linktext = $common;
        }
        else if ($guidebc == 'Scientific name (Common name)') {
          if ($scientific_name == $common) {
            // "Musca", not "Musca (Musca)"
            $linktext = $scientific_name;
          }
          else {
            $linktext = $scientific_name . ' (' . $common . ')';
          }
        }
        else {
          // Common name (Scientific name)
          if ($scientific_name == $common) {
            // "Musca", not "Musca (Musca)"
            $linktext = $common;
          }
          else {
            $linktext = $common . ' (' . $scientific_name . ')';
          }
        }
      }
      else {
        $linktext = $common;
      }
      if ($json) {
        $json_array[$taxon] = empty($scientific_name) ? $common : $scientific_name;
      }
      else {
        $bc[] = l($linktext, 'node/' . $parent_node->nid . $link_type);
      }
    }
  }

  return $json ? $json_array : $bc;
}

/**
 * Implements hook_preprocess_page().
 *
 * @see bgpage_menu_local_tasks_alter()
 */
function bg_preprocess_page(&$vars) {
  global $user;

  // Don't change the path in administrative pages.
  if (path_is_admin(current_path())) {
    return;
  }

  // Check that we have an nid in the path.
  $nid = arg(1);
  if (arg(0) == 'node' && is_numeric($nid)) {
    $node = node_load($nid);

    // Bail out if on a 404 page for a nonexistent nid.
    if ($node === FALSE) {
      return;
    }

    // Eliminate local task tabs on these special pages or their children.
    $pid = bg_get_first_parent_nid($node);
    if (($nid == BG_ID_REQUEST_NID) || // ID Request
        ($nid == BG_FRASS_NID) ||      // Frass
        ($pid == BG_ID_REQUEST_NID) || // Image in ID Request
        ($pid == BG_FRASS_NID) ||      // Image in Frass
        $vars['is_front'] ||           // Front page
        $node->type == 'page'          // Content of type page
        ) {
      $keep = array();

      if (isset($vars['tabs']['#primary']) && is_array($vars['tabs']['#primary'])) {
        foreach ($vars['tabs']['#primary'] as $item) {
          if ($item['#link']['path'] == 'node/%/edit') {
            $keep[] = $item;
          }
          elseif ($item['#link']['path'] == 'node/%/view') {
            $item['#link']['title'] = t('View');
            $keep[] = $item;
          }
        }

        $vars['tabs']['#primary'] = array();
        foreach ($keep as $item) {
          $vars['tabs']['#primary'][] = $item;
        }
      }
    }

    # Manually set the active tab to match expectations for certain node types.
    switch($node->type) {
      case 'book_reference':
        _bg_set_active_tab_by_title($vars['tabs'], 'Books');
        break;
      case 'bglink':
        _bg_set_active_tab_by_title($vars['tabs'], 'Links');
        break;
      case 'bgimage':
        _bg_set_active_tab_by_title($vars['tabs'], 'Images');
        break;
    }

    // Set breadcrumb for bgpage, bgimage and book reference nodes.
    if (!empty($node) && isset($node->type) && in_array($node->type, array('bgpage', 'bgimage', 'bglink', 'book_reference'))) {
      if ($node->type == 'bgimage') {
        // For bgimage nodes we load the bgpage parent. For example, if we are
        // looking at an image whose parent is House Fly (Musca domestica) that
        // is what we use for the end of the breadcrumb trail.
        $parent_nid = bg_get_parent_nid($node);

        // Fast breadcrumb building for images in ID Request and Frass.
        if ($parent_nid == BG_ID_REQUEST_NID) {
          drupal_set_breadcrumb(array(l('Home', ''), l('ID Request', 'node/' . BG_ID_REQUEST_NID . '/bgimage')));
          return;
        }
        elseif ($parent_nid == BG_FRASS_NID) {
          drupal_set_breadcrumb(array(l('Home', ''), l('Frass', 'node/' . BG_FRASS_NID . '/bgimage')));
          return;
        }
        else {
          $node = node_load($parent_nid);
          if (empty($node)) {
            return;
          }
        }
      }
      // Find the active tab in order to give breadcrumb links that context.
      $tab_context = 'info';
      foreach ($vars['tabs']['#primary'] as $tab) {
        if (isset($tab['#active']) && $tab['#active']) {
          $tab_path = $tab['#link']['path'];
          // Extract the 'bgimage' from 'node/%/bgimage'.
          $last_slash = strrchr($tab_path, '/');
          if ($last_slash) {
            $tab_path = substr($last_slash, 1);
            $tab_context = $tab_path == 'view' ? 'info' : $tab_path;
          }
        }
      }
      // Adjust the format of each crumb to respect user pref if user is logged in.
      if (user_is_logged_in()) {
        $account = user_load($user->uid);
        $guidebc = isset($account->field_user_breadcrumb_format[LANGUAGE_NONE][0]['value']) ? $account->field_user_breadcrumb_format[LANGUAGE_NONE][0]['value'] : 'Scientific name (Common name)';
        $breadcrumbs = bg_create_taxonomic_breadcrumb($node, $tab_context, $guidebc);
      }
      else {
        $breadcrumbs = bg_create_taxonomic_breadcrumb($node, $tab_context);
      }
      drupal_set_breadcrumb($breadcrumbs);
    }
    // Set breadcrumb for bgpage, bgimage and book reference nodes.
    if (isset($node->type) && in_array($node->type, array('bgpage', 'bgimage'))) {
      // Changes title for both node title and title bar.
      drupal_set_title(_bg_get_title_classification($node));
    }
  }
}

/**
 * Change the active tab from 'Info' to the tab with the given title.
 *
 * @param array $tabs
 *   Page tabs data, as in bg_preprocess_page.
 *
 * @param string $tab_title
 *   The title of the tab to be set to active.
 */
function _bg_set_active_tab_by_title(&$tabs, $tab_title) {
  if (isset($tabs['#primary']) && is_array($tabs['#primary'])) {
    $i = 0;
    foreach ($tabs['#primary'] as $item) {
      if ($item['#link']['title'] == 'Info') {
        unset($tabs['#primary'][$i]['#active']);
      }
      if ($item['#link']['title'] == $tab_title) {
        $tabs['#primary'][$i]['#active'] = 1;
      }
      $i++;
    }
  }
}

/**
 * Builds an array of entities to use on field_attach_load.
 *
 * @param array $nids
 *   An array of node nids.
 * @param string type
 *   The content type of the nids.
 * @return array
 *   An array of entities ready to be used for field_attach_load().
 */
function bg_prepare_nodes($nids, $type) {
  $entities = array();
  foreach ($nids as $nid) {
    $entities[$nid] = (object) array(
      'type' => $type,
      'nid' => $nid,
      'vid' => NULL,
    );
  }
  return $entities;
}


/**
 * Fetches a field for an array of entities.
 *
 * @param string $field
 *   The field name to fetch such as field_taxon.
 * @param array $nids
 *   The list of nids to fetch the data for.
 * @return
 *   array of stdClass objects.
 */
function bg_field_load_multiple($field, $entities) {
  if (count($entities)) {
    $result = db_query('select entity_id as nid, ' . $field . '_value as value from {field_data_' . $field . '} where entity_id in (:nids)', array(
      ':nids' => array_keys($entities),
    ));
    foreach ($result as $row) {
      $entities[$row->nid]->{$field}[LANGUAGE_NONE][0]['value'] = $row->value;
    }
  }
  return $entities;
}

/**
 * Returns a node's immediate parent nid.
 * Given 3,878075,52,60,40606,1117170,40619,144,377483 return 377483
 *
 * @param object @node
 * @return mixed
 *   int when there is a parent nid.
 *   NULL when there is no parent nid.
 */
function bg_get_parent_nid($node) {
  $nid = NULL;
  if (isset($node->field_parent) && !empty($node->field_parent[LANGUAGE_NONE])) {
    $parents = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
    $nid = end($parents);
  }
  return $nid;
}

/**
 * Returns a node's first parent nid.
 * Given 3,878075,52,60,40606,1117170,40619,144,377483 return 3
 *
 * @param object @node
 * @return mixed
 *   int when there is a parent nid.
 *   NULL when there is no parent nid.
 */
function bg_get_first_parent_nid($node) {
  $nid = NULL;
  if (isset($node->field_parent) && !empty($node->field_parent[LANGUAGE_NONE])) {
    $parents = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
    $reverse = array_reverse($parents);
    $nid = end($reverse);
  }
  return $nid;
}

/**
 * Implements hook_node_view_alter().
 */
function bg_node_view_alter(&$build) {
  _bg_node_process_display_suite_field_cite_html($build);
  _bg_node_process_field_body_cite_html($build);
  _bg_node_comments_process_cite_html($build);
}

/**
 * Process cites and works cited for entity type node with "body" field.
 *
 * @param array $build
 *   Html renderable array.
 */
function _bg_node_process_field_body_cite_html(&$build) {
  if (!isset($build['body'][0]['#markup'])) {
    return;
  }
  $citation_nids = array();
  $text = $build['body'][0]['#markup'];
  $build['body'][0]['#markup'] = _bg_get_citations_html($text, $citation_nids);
  if ($works_cited_html = _bg_get_add_works_cited_html($citation_nids)) {
    $build['body'][0]['#markup'] .= '<b>' . t('Works cited') . '</b>' . $works_cited_html;
  }
}

/**
 * Process cites and works cited for entity type node.
 *
 * @param array $build
 *   Html renderable array.
 */
function _bg_node_comments_process_cite_html(&$build) {
  if (!isset($build['comments']['comments'])) {
    return;
  }
  foreach ($build['comments']['comments'] as &$comment_build) {
    $citation_nids = array();
    if (!isset($comment_build['comment_body'][0]['#markup'])) {
      continue;
    }
    $text = $comment_build['comment_body'][0]['#markup'];
    $comment_build['comment_body'][0]['#markup'] = _bg_get_citations_html($text, $citation_nids);
    if ($works_cited_html = _bg_get_add_works_cited_html($citation_nids)) {
      $comment_build['comment_body'][0]['#markup'] .= '<b>' . t('Works cited') . '</b>' . $works_cited_html;
    }
  }
}

/**
 * Process cites and works cited for entity type node.
 *
 * @param array $build
 *   Html renderable array.
 */
function _bg_node_process_display_suite_field_cite_html(&$build) {
  // Check if we need to process citations of type [cite:123].
  if (($build['#view_mode'] != 'full') || !isset($build['bgpage_citations'])) {
    return;
  }

  // Loop all fields and search for citation tokens.
  // These are not Drupal tokens and that is why they are processed here.
  $citation_nids = array();
  foreach ($build as $field_key => $field) {
    if (strpos('#', $field_key) === 0) {
      continue;
    }
    if (is_array($field) && !empty($field[0]['#markup'])) {
      $text = $field[0]['#markup'];
      $build[$field_key][0]['#markup'] = _bg_get_citations_html($text, $citation_nids);
    }
  }
  if ($works_cited_html = _bg_get_add_works_cited_html($citation_nids)) {
    $build['bgpage_citations'][0]['#markup'] = $works_cited_html;
  }
  else {
    unset($build['bgpage_citations']);
  }
}

/**
 * Get citation html like: (1), (2), (3), (4).
 *
 * For instance given the following text:
 * "Right Solidago [node:20] contains caterpillas [node:50] and pupa [node:7040]"
 * Should convert to the following text:
 * "Right Solidago (1) contains host plants with caterpillas (2) and pupa (3)."
 * Every cite number contains a link to the node id.
 *
 * @param string $text
 *   The html text
 * @param array &$citation_nids
 *   The citation node ids. We can use later citation_nids
 *   so we can have a generation of "cites worked" which is
 *   used in _bg_get_add_works_cited_html().
 *
 * @return string|string[]|null
 *   The correct markup text cited linkeable to nodes.
 *
 * @see _bg_get_add_works_cited_html().
 */
function _bg_get_citations_html($text, &$citation_nids) {
  unset($match);
  if (preg_match_all("/\[cite(all)?:(\d+)(,(\d+))?(,(\d+))?\]/i", $text, $match)) {
    $find = array();
    $replace = array();
    // Loop citation matches and replace them by links of type "Some reference(2)".
    foreach ($match[2] as $idx => $nid) {
      $find[] = $match[0][$idx];
      if (!in_array($nid, $citation_nids)) {
        $citation_nids[] = $nid;
      }
      // Extract citation index so we can show it as "(7)" in the text.
      $citation_index = array_search($nid, $citation_nids);
      $bgref_node = node_load($nid);
      $first_page = '';
      $last_page = '';
      $pages = '';
      if (!empty($match[4][$idx])) {
        $first_page = $match[4][$idx];
      }
      if (!empty($match[6][$idx])) {
        $last_page = $match[6][$idx];
      }
      if ($last_page) {
        $pages = t(', pages :first_page - :last_page', array(
          ':first_page' => $first_page,
          ':last_page' => $last_page
        ));
      }
      elseif ($first_page) {
        $pages = t(', page :first_page', array(
          ':first_page' => $first_page
        ));
      }
      $title = $bgref_node->title;
      if ($bgref_node->name) {
        $title .= t(', by :author_name', array(
          ':author_name' => $bgref_node->name
        ));
        $title .= $pages;
      }
      $replace[] = '<span class="bgpage-citation">(' . l($citation_index + 1, 'node/' . $nid, array('attributes' => array('title' => $title))) . ')</span>';
    }
    return str_replace($find, $replace, $text);
  }
  return $text;
}

/**
 * Get the works cited in html.
 *
 * @param array $citation_nids
 *   The citation node ids.
 *
 * @return string|null
 *   The text already cited.
 */
function _bg_get_add_works_cited_html($citation_nids) {
  if (!$citation_nids) {
    return NULL;
  }
  // List citations at field bgpge_citations.
  $list_items = '<ol>';
  $cited_nodes = node_load_multiple($citation_nids);
  foreach ($cited_nodes as $bgref_node) {
    if (!empty($bgref_node)) {
      $list_items .= '<li>' . l($bgref_node->title, 'node/' . $bgref_node->nid, array('attributes' => array('title' => $bgref_node->title)));
      // Append book details if they are available.
      $book_details = array();
      if (!empty($bgref_node->field_book_reference_author['und'][0])) {
        $book_details[] = $bgref_node->field_book_reference_author['und'][0]['safe_value'];
      }
      if (!empty($bgref_node->field_book_reference_year['und'][0])) {
        $book_details[] = $bgref_node->field_book_reference_year['und'][0]['value'];
      }
      if (!empty($bgref_node->field_book_reference_publisher['und'][0])) {
        $book_details[] = $bgref_node->field_book_reference_publisher['und'][0]['safe_value'];
      }
      if (count($book_details)) {
        $list_items .= '</br>' . implode('. ', $book_details) . '.';
      }
      $list_items .= '</li>';
    }
  }
  $list_items .= '</ol>';
  return $list_items;
}

/**
 * Implements hook_entity_info_alter().
 */
function bg_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['homepage'] = array(
    'label' => t('Homepage'),
    'custom settings' => TRUE,
  );
}

/**
 * Honor bg_disable_email setting in settings.php.
 */
function bg_mail_alter(&$message) {
  if (variable_get('bg_disable_email', FALSE)) {
    $message['send'] = FALSE;
  }
}

function bg_block_info() {
  $blocks['bg_top_links'] = array(
    'info' => t('Top links'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'status' => TRUE,
    'region' => 'brand',
  );
  $blocks['bg_visual_guide'] = array(
    'info' => t('Visual Guide'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'status' => TRUE,
    'region' => 'content',
    'weight' => 1,

  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bg_block_view($delta = '') {
  $block = array();

  switch($delta){
    case 'bg_top_links':
      $block['content'] = theme('bg_top_links');
      break;
    case 'bg_visual_guide':
      $block['content'] = theme('bg_visual_guide');
      break;
  }

  return $block;
}

/**
 * Build the title differently according to the taxon.
 *
 * Variations are shown in https://github.com/bugguide/bugguide/issues/25
 *
 * @param stdClass $node
 * The node object.
 *
 * @return string
 *   The new title classification.
 *
 * @throws \EntityFieldQueryException
 */
function _bg_get_title_classification($node) {
  global $TAXON_IDS;
  global $TAXON_NAMES;

  $taxon_key = $node->field_taxon[LANGUAGE_NONE][0]['value'];
  $scientific_name = !empty($node->field_scientific_name[LANGUAGE_NONE][0]['value']) ? $node->field_scientific_name[LANGUAGE_NONE][0]['value'] : '';
  $common_name = !empty($node->field_common_name[LANGUAGE_NONE][0]['value']) ? $node->field_common_name[LANGUAGE_NONE][0]['value'] : '';
  $taxon_name = !empty($TAXON_NAMES[$taxon_key]) ? $TAXON_NAMES[$taxon_key] : '';
  if ($taxon_name) {
    // Species and Subspecies are below Genus and need special attention.
    // Namely, we need to prepend the Genus name and, for subspecies, the species name.
    if ($taxon_key >= $TAXON_IDS['Genus']) {
      $scientific_names_from_all_taxa = _bg_get_all_scientific_names_from_all_taxa_of_a_specific_node($node);
      $full_scientific_name = !empty($scientific_names_from_all_taxa['Genus']) ? $scientific_names_from_all_taxa['Genus'] : '';
        if (!empty($scientific_names_from_all_taxa['Species'])) {
          $full_scientific_name .= ' ' . $scientific_names_from_all_taxa['Species'];
        }
        if (!empty($scientific_names_from_all_taxa['Subspecies'])) {
          $full_scientific_name .= ' ' . $scientific_names_from_all_taxa['Subspecies'];
        }
        if (empty($common_name) || $full_scientific_name === $common_name) {
          return "$taxon_name $full_scientific_name";
        }
        elseif (!empty($common_name) && $full_scientific_name !== $common_name) {
          return "$taxon_name $full_scientific_name - $common_name";
        }
    }
    if (empty($common_name) || $scientific_name === $common_name) {
      return $taxon_name . ' ' . $scientific_name;
    }
    elseif (!empty($common_name) && $scientific_name !== $common_name) {
      return "$taxon_name $scientific_name - $common_name";
    }
  }
  else {
    // This is a No Taxon node.
    // No Taxon nodes use only the common name, not the scientific name.
    return "$common_name";
  }
}

/**
 * Get all scientific names from all taxa of a specific node.
 *
 * @param $node
 *
 * @return array
 *   An array of scientific names from taxon.
 */
function _bg_get_all_scientific_names_from_all_taxa_of_a_specific_node($node) {
  $nids = array($node->nid);
  $parent_nids = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
  // Include the current node to get also scientific name.
  $nids = array_merge($parent_nids, $nids);
  $scientific_names_from_taxon = _bg_get_all_scientific_names_from_all_taxa_of_nids($nids);
  return $scientific_names_from_taxon;
}

/**
 * Get all scientific names from all taxa of a specific node.
 *
 * @param $nids
 *   An array of node ids.
 *
 * @return array
 *   An array of scientific names from taxon keyed by TAXON_NAMEs.
 * @todo: Add missing example.
 * @todo: Optimization - consider replacing this with solr-based queries (see bgpage.module)
 * @throws \EntityFieldQueryException
 */
function _bg_get_all_scientific_names_from_all_taxa_of_nids($nids) {
  global $TAXON_NAMES;
  $scientific_names_from_taxon = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'bgpage')
      ->propertyCondition('nid', $nids, 'IN')
      ->fieldOrderBy('field_taxon', 'value', 'ASC');
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $parent_node) {
      // We only look at the format when the node has a scientific name.
      $scientific_name = !empty($parent_node->field_scientific_name) ? $parent_node->field_scientific_name[LANGUAGE_NONE][0]['value'] : '';
      if (!empty($scientific_name)) {
        // What level of hierarchy we're at
        if (!empty($parent_node->field_taxon) && isset($TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']])) {
          $taxon_name = $TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']];
          $scientific_names_from_taxon[$taxon_name] = $scientific_name;
        }
      }
    }
  }
  return $scientific_names_from_taxon;
}

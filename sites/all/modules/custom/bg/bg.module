<?php

include_once 'bg.features.inc';

// Node ID of ID Request
define('BG_ID_REQUEST_NID', 6);

// Node ID of Frass
define('BG_FRASS_NID', 9410);

/**
 * @file
 * The bg module provides bugguide-specific functionality.
 */

/**
 * Implementation of hook_theme().
 */
function bg_theme() {
  return array(
    'guidemap' => array(
      'arguments' => array(),
    ),
    'bugguide_fixup_locations_table' => array(),
  );
}

/**
 * Wildcard resolver for BugGuide tabs.
 */
function bg_node_to_arg($arg, $map, $index) {
  if ($arg == '%') {
    return NULL;
  }
  $node = node_load($arg);
  $nid = bg_get_parent_nid($node);
  if ($nid) {
   return $nid;
  }
  else {
   return $arg;
  }
}

/**
 * Implements hook_menu().
 */
function bg_menu() {
  $items['bg'] = array(
    'title' => 'Utilities',
    'description' => 'BugGuide system utilities',
    'page callback' => 'bg_utilities',
    'access arguments' => array('administer BG utilities'),
    'expanded' => 1,
    'file' => 'bg.admin.inc',
  );
  $items['bg/orphans'] = array(
    'title' => 'Show orphaned nodes',
    'description' => 'Shows pages, images, links, and references with no parent',
    'page callback' => 'bg_orphans',
    'access arguments' => array('administer BG utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/lepstage'] = array(
    'title' => 'Show stageless Leps',
    'description' => 'Shows Lepidoptera that have not been marked adult or immature',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bg_stageless_leps'),
    'access arguments' => array('administer BG utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/blankhodges'] = array(
    'title' => 'Show Leps without Hodges #',
    'description' => 'Shows Lepidoptera that have not been assigned a Hodges number',
    'page callback' => 'bg_blank_hodges',
    'access arguments' => array('administer BG utilities'),
    'file' => 'bg.admin.inc',
  );
  $items['bg/badlocations'] = array(
    'title' => 'Fix image locations',
    'description' => 'Shows images that have county names in county field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bg_fixup_locations_form'),
    'access arguments' => array('administer BG utilities'),
    'file' => 'bg.admin.inc',
  );

  return $items;
}

/**
 * Access callback for BugGuide tabs.
 */
function bg_menu_access($nid) {
  if (!$nid) {
    return FALSE;
  }
  $node = node_load($nid);
  $pid = bg_get_parent_nid($node);
  // No tabs on ID Request (6) or Frass (9410).
  if (user_access('access content') && ($pid != BG_ID_REQUEST_NID) && ($pid != BG_FRASS_NID)) {
    $show = array(
      'bgpage' => TRUE,
      'bgimage' => TRUE,
      'bgref' => TRUE,
      'bglink' => TRUE,
    );
    if (isset($show[$node->type])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function bg_block_info() {
  global $user, $base_url;

  $blocks['bg_guide'] = array(
    'info' => t('Clickable Guide'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bg_block_view($delta = '') {
  switch($delta) {
    case 'bg_guide':
      $block['subject'] = t('Clickable Guide');
      $block['content'] = array(
        '#theme' => 'bg_guide',
        '#title' => t('Clickable Guide'),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function bg_permission() {
  return array(
    'view badges' => array(
      'title' => t('View badges denoting privileged roles'),
      'description' => t('Make visible which other users have enhanced privileges.'),
    ),
    'administer bg utilities' => array(
      'title' => t('Administer bg utilities'),
      'description' => t('Perform bg maintenance tasks'),
    )
  );
}

/**
 * Implements hook_filter_info().
 */
function bg_filter_info() {
  $filters['bg_list'] = array(
    'title' => t('List item filter'),
    'description' => t('Every line that starts with a + will be converted into a list item.'),
    'process callback'  => '_bg_filter_list_item_process',
  );
  $filters['bg_cite'] = array(
    'title' => t('Citation filter'),
    'description' => t('Translates [cite] tags into real citations.'),
    'process callback'  => '_bg_filter_cite_process',
  );
  return $filters;
}

/**
 * BG list item filter process callback.
 */
function _bg_filter_list_item_process($text, $filter, $format) {
  return preg_replace('/^\+(.+)$/mi', '<div class="bgpage-bullet">$1</div>', $text);
}

/**
 * BG cite filter process clallback.
 */
function _bg_filter_cite_process($text, $filter, $format) {
  if (preg_match_all("/\[cite(all)?:(\d+)(,(\d+))?(,(\d+))?\]/i", $text, $match)) {
    // Fetch the static variable where we gather citations from all fields.
    $all_cited = &drupal_static('bg_all_cited', array());
    $find = array();
    $replace = array();
    foreach ($match[2] as $idx => $nid) {
      // Add citation to the static variable.
      if (isset($all_cited[$nid])) {
        $all_cited[$nid]->cite_index++;
      }
      else {
        $all_cited[$nid] = node_load($nid);
        $all_cited[$nid]->cite_index = 1;
      }

      // Extract citation index so we can show it as (index) in the text.
      $citation_index = array_search($nid, array_keys($all_cited));

      // Build citation text: title, author, 122-150.
      $node = $all_cited[$nid];
      $title = check_plain($node->title);
      if (isset($node->bgauthor)) {
        $title .= ", by " . $node->bgauthor;
      }
      $first_page = $match[4][$idx];
      $last_page = $match[6][$idx];
      if ($last_page) {
        $title .= ", pages $first_page - $last_page";
      }
      elseif ($first_page) {
        $title .= ", page $first_page";
      }

      $find[] = $match[0][$idx];
      $replace[] = '<span class="bgpage-citation">(' . l($citation_index + 1, 'node/' . $node->nid) . ')</span>';
    }

    $text = str_replace($find, $replace, $text);
  }
  return $text;
}

/**
 * Implements hook_node_presave().
 */
function bg_node_presave($node) {
  // Populate field_citations with citations in the node fields.
  // This is used by display suite's field_citations_list to render them.
  $all_cited = &drupal_static('bg_all_cited', array());
  if (count($all_cited)) {
    $nids = array_keys($all_cited);
    $node->field_citations[LANGUAGE_NONE] = array();
    foreach ($nids as $nid) {
      $node->field_citations[LANGUAGE_NONE][]['value'] = $nid;
    }
    return $node;
  }
}

/**
 * Implements hook_form_alter().
 */
function bg_form_alter(&$form, &$form_state, $form_id) {
  // Hide field_citations as it is managed internally.
  if ((strpos($form_id, 'node_form') !== FALSE) && isset($form['field_citations'])) {
    hide($form['field_citations']);
  }
}

/**
 * Determine if a string ends with a substring
 *
 * @param string $str
 * @param string $sub
 * @return string
 */
function bg_str_ends_with($str, $sub) {
  return substr( $str, strlen( $str ) - strlen( $sub ) ) == $sub;
}

function bg_fixup_parent(&$node) {
  $node->parent = bg_get_current_path($node->parent);
}

function bg_get_current_path($path) {
  $parents = explode(',', $path);
  if (count($parents) > 0) {
    // Load the node of the next-to-last parent.
    $parent = node_load(array(
      'nid' => $parents[count($parents) - 1],
      'type' => 'bgpage')
      );
    if ($parent) { // There exists a next-to-last parent.
      return bgpage_get_path($parent);
    }
  }

  // No parent or no next-to-last parent.
  return $path;
}

/**
 * Build a one-line taxonomic linked breadcrumb.
 *
 * @param $node
 * @param integer $from
 *   If the breadcrumb should not start at Home / Guide then specify which
 *   the nid of the taxon it should start from.
 * @return array of links with title and href.
 */
function bg_create_taxonomic_breadcrumb($node, $from = NULL){
  global $TAXON_NAMES;
  global $user;

  $bc = array();
  if (!$from ) {
    $bc[] = l('Home', '');
  }

  $nids = array($node->nid);
  if (isset($node->field_parent[LANGUAGE_NONE][0]['value'])) {
    $parent_nids = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
    $nids = array_merge($parent_nids, $nids);
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'bgpage')
    ->propertyCondition('nid', $nids, 'IN');
    //->fieldOrderBy('field_taxon', 'value', 'ASC');
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);

    $start_building = $from ? FALSE : TRUE;
    foreach($nodes as $parent_node) {
      if (!$start_building) {
        if ($parent_node->nid == $from) {
          $start_building = TRUE;
        }
        else {
          continue;
        }
      }

      // Common name is the node title.
      $common = $parent_node->title;

      // What level of hierarchy we're at
      if (!empty($parent_node->field_taxon) && isset($TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']])) {
        $taxon = $TAXON_NAMES[$parent_node->field_taxon[LANGUAGE_NONE][0]['value']];
      }
      else {
        $taxon = t('No Taxon');
      }

      // We only look at the user preferences when there is a scientific name present
      if (user_is_logged_in()) {
        $account = user_load($user->uid);
        $guidebc = $account->field_user_breadcrumb_format[LANGUAGE_NONE][0]['value'];
        $scientific_name = !empty($parent_node->field_scientific_name) ? $parent_node->field_scientific_name[LANGUAGE_NONE][0]['value'] : '';
        if ($guidebc == 'Scientific name') {
          $linktext = $scientific_name;
        }
        else if ($guidebc == 'Common name') {
          $linktext = $common;
        }
        else if ($guidebc == 'Scientific name (Common name)') {
          $linktext = $scientific_name . ' (' . $common . ')';
        }
        else{
          $linktext = $common . ' (' . $scientific_name . ')';
        }
      }
      else {
        $linktext = $common;
      }
      $bc[] = l($linktext, 'node/' . $parent_node->nid);
    }
  }

  return $bc;
}

/**
 * Implements hook_preprocess_page().
 */
function bg_preprocess_page(&$vars) {
  // Set breadcrumb for bgpage and bgimage nodes.
  $node = menu_get_object();
  if (!empty($node) && isset($node->type) && in_array($node->type, array('bgpage', 'bgimage'))) {
    drupal_set_breadcrumb(bg_create_taxonomic_breadcrumb($node));
  }
}

/**
 * Builds an array of entities to use on field_attach_load.
 *
 * @param array $nids
 *   An array of node nids.
 * @param string type
 *   The content type of the nids.
 * @return array
 *   An array of entities ready to be used for field_attach_load().
 */
function bg_prepare_nodes($nids, $type) {
  $entities = array();
  foreach ($nids as $nid) {
    $entities[$nid] = (object) array(
      'type' => $type,
      'nid' => $nid,
      'vid' => NULL,
    );
  }
  return $entities;
}


/**
 * Fetches a field for an array of entities.
 *
 * @param string $field
 *   The field name to fetch such as field_taxon.
 * @param array $nids
 *   The list of nids to fetch the data for.
 * @return
 *   array of stdClass objects.
 */
function bg_field_load_multiple($field, $entities) {
  if (count($entities)) {
    $first_entity = reset($entities);
    $fields = field_info_instances('node', $first_entity->type);
    $options = array(
      'field_id' => $fields[$field]['field_id'],
    );
    field_attach_load('node', $entities, FIELD_LOAD_CURRENT, $options);
  }
  return $entities;
}

/**
 * Returns a node's immediate parent nid.
 *
 * @param object @node
 * @return mixed
 *   int when there is a parent nid.
 *   NULL when there is no parent nid.
 */
function bg_get_parent_nid($node) {
  $nid = NULL;
  if (isset($node->field_parent) && !empty($node->field_parent[LANGUAGE_NONE])) {
    $parents = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
    $nid = end($parents);
  }
  return $nid;
}

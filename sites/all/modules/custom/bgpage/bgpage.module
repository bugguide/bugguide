<?php

include_once 'bgpage.features.inc';

/**
 * Implementation of hook_menu().
 */
function bgpage_menu() {
  $items = array();

  // Note: The View/Info tab has a default weight of -10.

  // Taxonomy tab.
  $items['node/%bgpage_node/tree'] = array(
    'title' => 'Taxonomy',
    'page callback' => 'bgpage_tree',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => -12,
    'type' => MENU_LOCAL_TASK,
    'file' => 'bgpage.pages.inc',
  );

  // Browse tab.
  $items['node/%bgpage_node/bgpage'] = array(
    'title' => 'Browse',
    'page callback' => 'bgpage_browse',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => -11,
    'type' => MENU_LOCAL_TASK,
    'file' => 'bgpage.pages.inc',
  );

  // Images tab.
  $items['node/%bgpage_node/bgimage'] = array(
    'title' => 'Images',
    'page callback' => 'bgpage_images',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'bgpage.pages.inc',
  );

  // Links tab.
  $items['node/%bgpage_node/bglink'] = array(
    'title' => 'Links',
    'page callback' => 'bgpage_bglink',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'bgpage.pages.inc',
  );

  // Books tab.
  $items['node/%bgpage_node/bgref'] = array(
    'title' => 'Books',
    'page callback' => 'bgpage_bgref',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'bgpage.pages.inc',
  );

  return $items;
}

/**
 * Wildcard resolver for Browse tab.
 *
 * For bgpage we return the nid, while for other content types with a parent field
 * we return the immediate parent.
 */
function bgpage_node_to_arg($arg, $map, $index) {
  if ($arg == '%') {
    return NULL;
  }

  $node = node_load($arg);
  if (empty($node)) {
    return NULL;
  }

  if ($node->type == 'bgpage') {
    return $arg;
  }
  elseif (isset($node->field_parent)) {
    return bg_get_parent_nid($node);
  }

  return NULL;
}

/**
 * Implements hook_ds_fields_info().
 */
function bgpage_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['bgpage_classification'] = array(
      'title' => t('Classification'),
      'description' => t('Renders the classification tree for a Guide Page.'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgpage_classification',
      'file' => drupal_get_path('module', 'bgpage') . '/bgpage.ds.field.inc',
    );

    $fields['bgpage_citations'] = array(
      'title' => t('Works cited'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgpage_citations',
      'file' => drupal_get_path('module', 'bgpage') . '/bgpage.ds.field.inc',
    );

    $fields['bgpage_browse'] = array(
      'title' => t('Browse images per children'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgpage_browse',
      'file' => drupal_get_path('module', 'bgpage') . '/bgpage.ds.field.inc',
    );

    $fields['bgpage_images'] = array(
      'title' => t('Browse all images'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgpage_images',
      'file' => drupal_get_path('module', 'bgpage') . '/bgpage.ds.field.inc',
    );

    $fields['bgpage_representative_images'] = array(
      'title' => t('Representative images for taxon'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'bgpage_representative_images',
      'file' => drupal_get_path('module', 'bgpage') . '/bgpage.ds.field.inc',
    );
  }
  return array($entity_type => $fields);
}

/**
 * Change "View" tab to say "Info".
 * This is reverted to "View" in bgpage_menu_local_tasks_alter() for some
 * content types.
 */
function bgpage_menu_alter(&$items) {
  $items['node/%node/view']['title'] = t('Info');
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @see bg_preprocess_page()
 */
function bgpage_menu_local_tasks_alter(&$data, $route_name) {
  // Don't show bgpage local tasks when editing or cloning or deleting a node.
  if (in_array($route_name['path'], array('node/%/edit', 'node/%/clone/%', 'node/%/delete'))) {
    $local_tasks_to_remove = array();
    foreach ($data['tabs'][0]['output'] as $index => $local_task) {
      if (in_array($local_task['#link']['title'], array('Taxonomy', 'Browse', 'Images', 'Books', 'Links', 'Data'))) {
        $local_tasks_to_remove[] = $index;
      }
      elseif ($local_task['#link']['title'] == 'Info') {
      // When editing or deleting an image the Info tab should revert back to View.
       $data['tabs'][0]['output'][$index]['#link']['title'] = t('View');
      }
    }
    foreach ($local_tasks_to_remove as $task_index) {
      unset($data['tabs'][0]['output'][$task_index]);
    }

    return;
  }

  // Don't show the 'Recent images' button on ID Request or Frass.
  if ($route_name['path'] == 'node/%/bgimage' && ($route_name['map'][1] == BG_ID_REQUEST_NID || $route_name['map'][1] == BG_FRASS_NID)) {
    foreach ($data['actions']['output'] as $index => $action) {
      if ($action['#link']['path'] == 'node/%/bgimage/recent') {
        unset($data['actions']['output'][$index]);
        break;
      }
    }
  }

  // When looking at a bgimage node or book_reference, the Info tab should not link
  // to the nid of the bgimage node, but to its parent (which will be a bgpage node).
  if ($route_name['path'] == 'node/%' && isset($route_name['page_arguments'][0]->type)) {
    switch($route_name['page_arguments'][0]->type) {

      case 'forum':
      case 'page':
        $data['tabs'][0]['output'][0]['#link']['title'] = 'View';
        break;

      case 'bgimage':
      case 'book_reference':
      case 'bglink':
        $parentpath = $route_name['page_arguments'][0]->field_parent[LANGUAGE_NONE][0]['value'];
        $parents = explode(',', $parentpath);
        if (count($parents) > 0 && $parents[0] != BG_ID_REQUEST_NID && $parents[0] != BG_FRASS_NID) {
          $info_tab_index = 2;
          $parent_nid = $parents[count($parents) - 1];
          $data['tabs'][0]['output'][$info_tab_index]['#link']['href'] = 'node/' . $parent_nid;

          // Also, the Info tab should not look like it is selected.
          unset($data['tabs'][0]['output'][$info_tab_index]['#active']);
        }
      }
  }
}

function bgpage_permission() {
  return array(
    'view taxon ID field' => array(
      'title' => 'View taxon ID field',
    ),
    'view who edited bgpage' => array(
      'title' => 'View who edited a bgpage',
    ),
    'view raw parents' => array(
      'title' => 'View raw parents',
    ),
  );
}

function bgpage_theme() {
  return array(
    'bgpage_classification' => array(
      'arguments' => array('node' => NULL),
    ),
    'bgpage_tree' => array(
      'arguments' => array('children' => NULL, 'nids' => NULL, 'taxons' => NULL, 'titles' => NULL, 'scientific_names' => NULL),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Assumption: this form is only used for editing, not new nodes.
 * New nodes are created with the bgpage quickadd form.
 */
function bgpage_form_bgpage_node_form_alter(&$form, &$form_state, $form_id) {
  // The common name field becomes the title during validation.
  // Thus, hide the title field on the edit form.
  $form['title']['#access'] = FALSE;

  $form['field_weight']['#access'] = FALSE;

  if (!user_access('view taxon ID field')) {
    $form['field_taxon']['#access'] = FALSE;
  }
  if (!user_access('view who edited bgpage')) {
    $form['field_editors']['#access'] = FALSE;
  }
  if (!user_access('view raw parents')) {
    $form['field_parent']['#access'] = FALSE;
  }

  // Run our validator after the regular node validator runs.
  $form['#validate'][] = 'bgpage_node_form_validate';

}

/**
 * This bgpage node validation code is currently shared by the bgpage quickadd
 * form and the bgpage node edit form; it assumes the name of the common and
 * scientific name inputs is field_common_name and field_scientific_name (for
 * form_set_error purposes).
 *
 * This function may make minor fixups to $scientific_name or $common_name, and
 * may set $common_name if not already set.
 */
function _bgpage_shared_form_validate(&$scientific_name, &$common_name, $parent, $taxon, $nid) {
  global $TAXON_NAMES;

  // Make sure we're using clean common and scientific names.
  $scientific_name = trim($scientific_name);
  $common_name = trim($common_name);

  if (!isset($TAXON_NAMES[$taxon])) {
    $taxon_name = t('No Taxon');
    if ($scientific_name != '') {
      form_set_error('field_scientific_name', t("The scientific name must be blank when choosing 'No Taxon'."));
    }
    if ($common_name == '') {
      form_set_error('field_common_name', t("You must provide a common name when choosing 'No Taxon'."));
    }
  }
  else {
    $taxon_name = $TAXON_NAMES[$taxon];
    if ($scientific_name == '') {
      form_set_error('field_scientific_name', t("A scientific name is required when the taxon is not 'No Taxon'."));
    }
  }

  if ($taxon_name == t('No Taxon')) {
    // Check if this is a duplicate entry.
    // Criteria: has same parent, also has same title, also is not this node (if editing).
    if ($common_name) {
      $title = $common_name;
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'bgpage')
            ->propertyCondition('title', $title)
            ->fieldCondition('field_parent', 'value', $parent);
      // Existing nodes have nids.
      // In that case we want the query to exclude the nid of this node
      // because it is silly to alert that this node has the same title as this node.
      if (isset($nid)) {
        $query->propertyCondition('nid', $nid, '<>');
      }
      $result = $query->execute();
      if (!empty($result['node'])) {
        foreach ($result['node'] as $node_id => $info) {
          form_set_error('', t('There is a <a href="!link" target="_blank">guide page</a> with that title and parent.', array(
            '!link' => url('node/' . $node_id),
          )));
        }
      }
    }
  }
  elseif (!empty($scientific_name)) {
    if (strpos($scientific_name, ' ')) {
      form_set_error('field_scientific_name', t('Scientific name should be one word only.'));
    }
    elseif (preg_match("/[^A-Za-z-]/", $scientific_name) > 0) {
      form_set_error('field_scientific_name', t("Only the letters 'a' to 'z' are allowed."));
    }
    elseif (($taxon_name == "Superfamily") && !bg_str_ends_with($scientific_name, "oidea")) {
      form_set_error('field_scientific_name', t("A superfamily name should end with 'oidea'."));
    }
    elseif (($taxon_name == "Family") && !bg_str_ends_with($scientific_name, "idae")) {
      form_set_error('field_scientific_name', t("A family name should end with 'idae'."));
    }
    elseif (($taxon_name == "Subfamily") && !bg_str_ends_with($scientific_name, "inae")) {
      form_set_error('field_scientific_name', t("A subfamily name should end with 'inae'."));
    }
    elseif (($taxon_name == "Species") || ($taxon_name == "Subspecies")) {
      $scientific_name = strtolower($scientific_name);
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'bgpage')
          ->fieldCondition('field_scientific_name', 'value', $scientific_name)
          ->fieldCondition('field_taxon', 'value', $taxon)
          ->fieldCondition('field_parent', 'value', $parent);
      // Existing nodes have nids.
      // In that case we want the query to exclude the nid of this node
      // because it is silly to alert that this node has the same title as this node.
      if (isset($nid)) {
        $query->propertyCondition('nid', $nid, '<>');
      }
      $result = $query->execute();
      if (!empty($result['node'])) {
        foreach ($result['node'] as $node_id => $info) {
          form_set_error('', t('There is a <a href="!link" target="_blank">guide page</a> with that scientific name, taxon and parent.', array(
              '!link' => url('node/' . $node_id),
          )));
        }
      }
    }
    else {
      $scientific_name = ucfirst(strtolower($scientific_name));
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'bgpage')
            ->fieldCondition('field_scientific_name', 'value', $scientific_name)
            ->fieldCondition('field_taxon', 'value', $taxon);
      // Existing nodes have nids.
      // In that case we want the query to exclude the nid of this node
      // because it is silly to alert that this node has the same title as this node.
      if (isset($nid)) {
        $query->propertyCondition('nid', $nid, '<>');
      }
      $result = $query->execute();
      if (!empty($result['node'])) {
        foreach ($result['node'] as $node_id => $info) {
          form_set_error('', t('There is a <a href="!link" target="_blank">guide page</a> with that scientific name and taxon.', array(
            '!link' => url('node/' . $node_id),
          )));
        }
      }
    }
  }

  // Common name field is required, as it becomes the node title.
  // If it has not been entered by the user, build it.
  if ($common_name == '') {
    if (($taxon_name == "Species") || ($taxon_name == "Subspecies")) {
      // Populating a common name for Species and Subspecies includes the Genus
      // name. E.g., 1668198 is a subspecies so even though the scientific name
      // is nevadensis the common name value would be Zootermopsis nevadensis
      // nevadensis.
      $nids = explode(',', $parent);
      $taxon_key = _bg_get_all_scientific_names_from_all_taxa_of_nids($nids);
      if ($taxon_name == "Species") {
        $common_name = $taxon_key['Genus'] . ' ' . $scientific_name;
      }
      if ($taxon_name == "Subspecies") {
        $common_name = $taxon_key['Genus'] . ' ' . $taxon_key['Species'] . ' ' . $scientific_name;
      }
    }
    else {
      // Populating a common name for other taxa means just copying the scientific name.
      $common_name = $scientific_name;
    }
  }
}

/**
 * Form validate callback for bgpage nodes.
 */
function bgpage_node_form_validate(&$form, &$form_state) {
  _bgpage_shared_form_validate(
    $form_state['values']['field_scientific_name'][LANGUAGE_NONE][0]['value'],
    $form_state['values']['field_common_name'][LANGUAGE_NONE][0]['value'],
    $form_state['values']['field_parent'][LANGUAGE_NONE][0]['value'],
    $form_state['values']['field_taxon'][LANGUAGE_NONE][0]['value'],
    $form_state['values']['nid']
  );

  // Synchronize Drupal node title field with common name field.
  $form_state['values']['title'] = $form_state['values']['field_common_name'][LANGUAGE_NONE][0]['value'];

  // Validate that nids in the representative images list are actually bgimage nodes.
  $rep_images = $form_state['values']['field_representative_images'][LANGUAGE_NONE][0]['value'];
  $rep_nids = explode(',', $rep_images);
  foreach($rep_nids as $rep_nid) {
    if (!ctype_digit($rep_nid)) {
      form_set_error('field_representative_images', t("Unrecognized representative image: '@nid'.", array('@nid' => $rep_nid)));
      break;
    }

    $node = node_load($rep_nid);
    if (!$node) {
      form_set_error('field_representative_images', t('Unknown representative image: !nid.', array('!nid' => $rep_nid)));
      break;
    }
    if ($node->type != 'bgimage') {
      form_set_error('field_representative_images', t('Node !nid in the Representative Images list is not an image.', array('!nid' => $rep_nid)));
      break;
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build_node().
 */
function bgpage_apachesolr_index_document_build_node($document, $entity, $env_id) {
  if ($entity->type !== 'bgpage') {
    return;
  }

  // Classification field used for sorting.
  $classification = '';
  if (!empty($entity->field_parent[LANGUAGE_NONE][0]['value'])) {
    $classification = $entity->field_parent[LANGUAGE_NONE][0]['value'] . ',';
  }
  $classification .= $entity->nid;
  $document->addField('ss_bgpage_classification', $classification);

  // Total images under this page.
  // We use bgimage table because parent_idx has an index. Otherwise this query
  // would take forever.
  $total_images = db_query("SELECT COUNT(nid)
    FROM {bgimage}
    WHERE parent_idx LIKE '$classification,%'")->fetchField();

  $document->addField('is_bgpage_total_images', $total_images);

  // Parents field used for searching for descendants.
  $parents = array();
  if (!empty($entity->field_parent[LANGUAGE_NONE][0]['value'])) {
    $parents = explode(',', $entity->field_parent[LANGUAGE_NONE][0]['value']);
  }
  foreach ($parents as $parent) {
    $document->addField('sm_bgpage_parents', $parent);
  }

  // Immediate parent field used for searching direct descendants.
  $parent_nid = bg_get_parent_nid($entity);
  if ($parent_nid != NULL) {
    $document->addField('ss_bgpage_immediate_parent', $parent_nid);
  }

  if (isset($entity->field_weight[LANGUAGE_NONE][0]['value'])) {
    $document->addField('is_field_weight', $entity->field_weight[LANGUAGE_NONE][0]['value']);
  }
}

/**
 * Given a node, creates the Solr filter to build it's tree.
 *
 * @param $node
 *   A node object.
 *
 * @returns SolrFilterSubQuery
 *   The filter query.
 */
function _bgpage_create_solr_filter_for($node) {
  // Extract parent nids.
  if (!empty($node->field_parent[LANGUAGE_NONE])) {
    $nids = explode(',', $node->field_parent[LANGUAGE_NONE][0]['value']);
  }
  else {
    $nids = array();
  }

  // Append current node at the end.
  $nids[] = $node->nid;

  // Build classification tree.
  $nids_filter = new SolrFilterSubQuery('OR');
  foreach ($nids as $nid) {
    $nids_filter->addFilter('entity_id', $nid);
  }

  return $nids_filter;
}

/**
 * Builds a hierarchy tree for a set of related nodes.
 *
 * @param array $results
 *   An array of Apache Solr search results.
 * @returns string
 *   The rendered HTML that represents the tree.
 */
function bgpage_tree_build($results) {
  global $TAXON_NAMES, $TAXON_IDS;
  $output = '<span class="graytext">Kingdom</span> <strong>Animalia</strong> - Animals<br/>';

  foreach ($results as $result) {
    // Calculate indentation.
    $indents = count(explode(',', $result->ss_bgpage_classification));
    $indents = str_repeat('&nbsp;', ($indents) * 2);

    // Render the element.
    $output .= $indents . bgpage_tree_child($result);
    $output .= '<br>';

  }

  return $output;
}

/**
 * Renders a tree element.
 *
 * @param object result
 *   An Apache Solr search result.
 * @return string
 *   The rendered tree item.
 */
function bgpage_tree_child($result) {
  global $TAXON_NAMES, $TAXON_IDS, $base_url;
  if (!empty($result->its_field_taxon) && isset($TAXON_NAMES[$result->its_field_taxon])) {
    $taxon_name = $TAXON_NAMES[$result->its_field_taxon];
    $taxon_id = $result->its_field_taxon;
  }
  else {
    $taxon_name = t('No Taxon');
    $taxon_id = NULL;
  }

  $scientific_name = $result->label;
  if (!empty($result->sm_field_scientific_name)) {
    $scientific_name = $result->sm_field_scientific_name[0];
  }

  $output = "<span class=\"bgpage-taxon-title\">$taxon_name </span>";
  $italics = $taxon_id >= $TAXON_IDS["Genus"];
  $output .= "<span class=\"bgpage-taxon-desc\">";
  if ($italics) {
    $output .= "<i>";
  }
  $output .= t('<a href="@url"><strong>!name</strong></a>', array('@url' => $base_url . "/node/" . $result->entity_id . "/tree", '!name' => $scientific_name));
  if ($italics) {
    $output .= "</i>";
  }
  if ($result->label != $scientific_name) {
    $output .= " - " . $result->label;
  }
  if (!empty($result->sm_field_hodges_number)) {
    $output .= " - Hodges#" . $result->sm_field_hodges_number[0];
  }

  // Total images under this page.
  $output .= ' (' . $result->is_bgpage_total_images . ')';
  // Close the bgpage-taxon-desc span.
  $output .= '</span>';
  return $output;
}

/**
 * Fetches classification details for a set of nids.
 *
 * @param int $nid
 *   The nid to use as the tree root.
 * @param object $filter
 *   SolrFilterSubQuery filter that defintes which elements to return.
 * @return array of ApacheSolr search result objects.
 */
function bgpage_fetch_classification($nid, $filter) {
  $results = array();

  try {
    $query = apachesolr_drupal_query('apachesolr', array());
    // Configure query.
    $query->addFilterSubQuery($filter);
    $query->addParam('fl', 'entity_id,label,ss_bgpage_classification,sm_field_hodges_number,its_field_taxon,sm_field_scientific_name,is_bgpage_total_images,ss_bgpage_immediate_parent');
    $query->addParam('rows', 10000000);
    // We need to sort in the reverse direction of the final result due to the
    // stack in the algorithm below.
    $query->addParam('sort', 'its_field_weight desc');
    // There are some cases where weights of multiple children are the same.
    $query->addParam('sort', 'entity_id desc');

    // Run query and render results if matches are found.
    list($final_query, $response) = apachesolr_do_query($query);
    if ($response->code == '200' && $response->response->numFound > 0) {
      $results = $response->response->docs;
    }
    else {
      watchdog('bgpage', 'No results found for nid !nid', array('!nid' => $nid));
    }
  }
  catch (Exception $e) {
    watchdog('bgpage', 'Could not connect to Solr to fetch data for !nid. Error was %error.', array(
      '!nid' => $nid,
      '%error' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }

  $grouped_results = array();
  foreach ($results as $row) {
    $grouped_results[$row->ss_bgpage_immediate_parent ?? NULL][] = $row;
  }

  $ordered_results = array();
  $stack = $grouped_results[NULL];
  while (($row = array_pop($stack))) {
    $ordered_results[] = $row;
    if (!array_key_exists($row->entity_id, $grouped_results)) {
      continue;
    }
    foreach ($grouped_results[$row->entity_id] as $child) {
      $stack[] = $child;
    }
  }

  return $ordered_results;
}

/**
 * Fetches classification details for children of a given node.
 *
 * @param int $nid
 *   The nid of the parent whose children should be returned.
 * @return array of ApacheSolr search result objects, ordered by weight value.
 */
function bgpage_fetch_children_by_weight($nid) {
  $results = array();
  try {
    $query = apachesolr_drupal_query('bgpage_children_weight', array());
    $immediate_parent_filter = new SolrFilterSubQuery('AND');
    $immediate_parent_filter->addFilter('ss_bgpage_immediate_parent', $nid);
    $query->addFilterSubQuery($immediate_parent_filter);
    $query->addParam('fl', 'entity_id,label,sm_field_hodges_number,its_field_taxon,sm_field_scientific_name,is_bgpage_total_images');
    $query->addParam('rows', 10000000);
    $query->addParam('sort', 'is_field_weight asc');

    list($final_query, $response) = apachesolr_do_query($query);

    if ($response->code == '200' && $response->response->numFound > 0) {
      $results = $response->response->docs;
    }
    else {
      watchdog('bgpage', 'No child weight results found for nid !nid', array('!nid' => $nid));
    }
  }
  catch (Exception $e) {
    watchdog('bgpage', 'Could not connect to Solr to fetch data for !nid. Error was %error.', array(
      '!nid' => $nid,
      '%error' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }

  return $results;
}

/**
 * Query alter to get more results if field_parent exists.
 *
 * This is useful to get more records for BOOKS and LINKS.
 *
 * Example SQL query after using this function for LINKS:
 *
 * SELECT node.nid AS nid, node.title AS node_title, node.created AS node_created, 'node' AS field_data_body_node_entity_type
 * FROM {node} node
 * LEFT JOIN {field_data_field_parent} field_data_field_parent ON node.nid = field_data_field_parent.entity_id AND
 * (field_data_field_parent.entity_type = 'node' AND field_data_field_parent.deleted = '0')
 * WHERE (( (field_parent_value IN  (
 * '3',
 * '3,878075',
 * '3,878075,52',
 * '3,878075,52,57',
 * '3,878075,52,57,81',
 * '3,878075,52,57,81,156',
 * '3,878075,52,57,81,156,43480',
 * '3,878075,52,57,81,156,43480,483723,
 * '3,878075,52,57,81,156,43480,483723,347')) OR (field_parent_value LIKE '3,878075,52,57,81,156,43480,483723,347,%' ESCAPE '\\') ) AND
 * (( (node.status = '1') AND (node.type IN  ('book_reference')) AND (field_data_field_parent.field_parent_value LIKE '%' ESCAPE '\\') )))
 * ORDER BY field_parent_value != '3,878075,52,57,81,156,43480,483723,347', LENGTH(field_parent_value) DESC, node_created DESC
 * LIMIT 25 OFFSET 0
 *
 * @param stdClass $view
 *   The view object.
 *
 * @param stdClass $query
 *   The query object.
 *
 * @see bgref.module
 * @see bglink.module
 */
function _bgpage_views_query_alter_for_field_parent(&$view, &$query) {
  $nid = $view->args[0];
  $node = node_load($nid);
  if (!isset($node->field_parent[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  $parent_paths = array();
  // We want to include refs/links whose parent is this node - in fact we want
  // to prioritize those - so include this node in the parent path.
  $parent_path = $node->field_parent[LANGUAGE_NONE][0]['value'] . ',' . $nid;

  $parent = '';
  foreach (explode(',', $parent_path) as $nid) {
    if ($parent) {
      $parent .= ',';
    }
    $parent .= $nid;
    $parent_paths[] = $parent;
  }

  $where_condition = array(
    'conditions' => array(
      array(
        'field' => 'field_parent_value',
        'value' => $parent_paths,
        'operator' => 'IN',
      ),
      array(
        'field' => 'field_parent_value',
        'value' => $parent_path . ',%',
        'operator' => 'LIKE',
      )
    ),
    'type' => 'OR',
  );
  array_unshift($query->where, $where_condition);

  // The following is equivalent to:
  // ORDER BY field_parent_value != '$parent_path' ASC, LENGTH(field_parent_value) DESC
  $order_by = array(
    'field' => "field_parent_value != '$parent_path', LENGTH(field_parent_value)",
    'direction' => 'DESC',
  );
  array_unshift($query->orderby, $order_by);
}

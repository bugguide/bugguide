<?php
/**
 * @file
 * Code for the BG Image feature.
 */

include_once 'bgimage.features.inc';
include_once './images/image_obfuscate.inc';

/**
 * Implements hook_menu_alter().
 */
function bgimage_menu_alter(&$items) {
  $items['node/%node/clone/%clone_token']['title callback'] = '_bgimage_clone_action_link_title';
}

/**
 * Implements hook_ds_fields_info().
 */
function bgimage_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['bgimage_photo_number'] = array(
      'title' => t('Photo number'),
      'description' => t('Renders photo number as Photo #123456.'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgimage_field_photo_number',
      'file' => drupal_get_path('module', 'bgimage') . '/bgimage.ds.field.inc',
    );

    $fields['bgimage_copyright'] = array(
      'title' => t('Photo copyright'),
      'description' => t('Renders a copyright statement.'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgimage_field_copyright',
      'file' => drupal_get_path('module', 'bgimage') . '/bgimage.ds.field.inc',
    );

    $fields['bgimage_related'] = array(
      'title' => t('Related images'),
      'description' => t('Renders related images for an specimen.'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgimage_field_related_images',
      'file' => drupal_get_path('module', 'bgimage') . '/bgimage.ds.field.inc',
    );

    $fields['bgimage_title_classification'] = array(
      'title' => t('Title and classification'),
      'description' => t('Renders the title and classification of an image.'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_bgimage_field_title_classification',
      'file' => drupal_get_path('module', 'bgimage') . '/bgimage.ds.field.inc',
    );

    return array($entity_type => $fields);
  }
  return;
}

function bgimage_node_validate($node, $form, &$form_state) {
  if ($node->type != 'bgimage') {
    return;
  }
  // Need a bg_str_ends_with from bg.module
  drupal_load('module', 'bg');

  // Set parent.
  if ($form_state['values']['field_parent'][LANGUAGE_NONE][0]['value'] == '') {
    $potential_parent = arg(3); // node/add/bgimage/1234
    if ($potential_parent === NULL) {
      form_set_error('field_bgimage_parent', 'bgimage is unable to continue without a parent.');
    }
    else {
      $parent = (int)$potential_parent;
      if ($parent == 0) {
        form_set_error('field_bgimage_parent', 'bgimage could not make sense of parent.');
      }
      else {
        $full_parent = bgimage_get_full_parent($parent);
        if ($full_parent === FALSE) {
          form_set_error('field_parent', 'bgimage: No such parent.');
        }
        else {
          $form_state['values']['field_parent'][LANGUAGE_NONE][0]['value'] = $full_parent . ',' . $parent;
        }
      }
    }
  }

  if ($node->{'field_bgimage_image'}[LANGUAGE_NONE][0]['fid'] == 0) {
    form_set_error('field_bgimage_image', 'Did you forget to attach an image? Please attach one and resubmit.');
  }

  if ($form_state['values']['field_bgimage_date'][LANGUAGE_NONE][0]['value'] === NULL) {
    $form_state['values']['field_bgimage_date'][LANGUAGE_NONE][0]['value'] = $form_state['values']['created'];
  }

  if (strtotime($form_state['values']['field_bgimage_date'][LANGUAGE_NONE][0]['value']) > $form_state['values']['created']) {
    form_set_error('field_bgimage_date', 'The date taken cannot be in the future.');
  }

  //if ((strstr($node->parent, ",57,") && !$node->immature && !$node->adult)) {
	//  $error["leps_stage"] = theme("theme_error", "Please check adult (moth/butterfly) and/or immature (egg/caterpillar/pupa) when submitting to Lepidoptera.");
  //}

  $county = isset($node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value']) ? $node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value'] : '';
  if (bg_str_ends_with(strtoupper($county), ' PARISH')) {
     $node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value'] = substr($county, 0, strlen($county) - 7);
  }
  if (bg_str_ends_with(strtoupper($county), ' COUNTY')) {
     $node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value'] = substr($county, 0, strlen($county) - 7);
  }
  if (bg_str_ends_with(strtoupper($county), ' CO')) {
     $node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value'] = substr($county, 0, strlen($county) - 3);
  }
  if (bg_str_ends_with(strtoupper($county), ' CO.')) {
     $node->{'field_bgimage_county'}[LANGUAGE_NONE][0]['value'] = substr($county, 0, strlen($county) - 4);
  }
  if ((strtoupper($county) == 'USA') ||
		(strtoupper($county) == 'UNITED STATES') ||
		(strtoupper($county) == 'CANADA')) {
		form_set_error('field_bgimage_county', 'You have entered a country here. Please specify the county/parish/district/region instead.');
	}

	// TODO
	// bgimage_set_titles()
}

/**
 * Implements hook_node_insert().
 */
function bgimage_node_insert($node) {
  if ($node->type != 'bgimage') {
    return;
  }

  _bgimage_obfuscate_uploaded_image($node);

  // Mirror information to bgimage table for scalability.
  // Note that we are inside node_save()'s database transaction.
  $fields = _bgimage_prepare($node);
  $fields['base'] = $node->bgimage_uuid;
  $result = db_insert('bgimage')
    ->fields($fields)
    ->execute();

  // Update bgimage_series table used for rendering related images.
  if (isset($node->original_nid)) {
    $result = db_query('select * from {bgimage_series} where nid = :nid', array(
      ':nid' => $node->original_nid,
    ))->fetchObject();

    db_insert('bgimage_series')
      ->fields(array(
        'nid' => $node->nid,
        'weight' => $result->weight + 1,
        'series' => $result->series,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function bgimage_node_update($node) {
  if ($node->type != 'bgimage') {
    return;
  }

  _bgimage_obfuscate_uploaded_image($node);

  // Mirror information to bgimage table for scalability.
  // Note that we are inside node_save()'s database transaction.
  $fields = _bgimage_prepare($node);
  $result = db_update('bgimage')
    ->fields($fields)
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_field_widget_form_alter().
 */
function bgimage_preprocess_image_widget(&$variables) {
  // Removes the 'Upload' button and source image URL from the bgimage image field.
  if ($variables['element']['#field_name'] == 'field_bgimage_image') {
    $variables['element']['upload_button']['#access'] = FALSE;
    $variables['element']['filename']['#access'] = FALSE;
  }
}

/**
 * Obfuscates an uploaded image for a bgimage node.
 *
 * @param object @node
 */
function _bgimage_obfuscate_uploaded_image($node) {
  // Even though the image field is required, during migration it may not be
  // present.
  if (isset($node->field_bgimage_image[LANGUAGE_NONE])) {
    $node->bgimage_uuid = md5(rand());
    $obfuscate = image_obfuscate($node->bgimage_uuid);
    $prefix = bgimage_get_prefix($obfuscate);
    $directory = 'public://raw/' . $prefix;
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      watchdog('image', 'Failed to create style directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
      return FALSE;
    }

    $file = file_load($node->{'field_bgimage_image'}[LANGUAGE_NONE][0]['fid']);
    // Move file into scalable file area, e.g.
    // files/raw/7H3/HEH/7H3HEHUZ6H3HMLUZ8LWZUHLRUHVZMLZR5LAZ8LUZ6HBH0L6Z4H6ZLLOHIHBHQL5Z8H.jpg
    file_move($file, $directory . $obfuscate . '.jpg');
  }
}

/**
 * Extracts data from a bgimage node to be stored in bgimage table.
 *
 * @param object @node
 *   A bgimage node.
 * @return array
 *   An array containing the data to be saved in the database.
 */
function _bgimage_prepare($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $male = 0;
  $female = 0;
  foreach ($wrapper->field_bgimage_gender->value() as $selected_value) {
    if ($selected_value == 'female') {
      $female = 1;
    }
    elseif ($selected_value == 'male') {
      $male = 1;
    }
  }

  $egg = 0;
  $immature = 0;
  $pupa = 0;
  $adult = 0;
  foreach ($wrapper->field_bgimage_life_stage->value() as $selected_value) {
    if ($selected_value == 'immature') {
      $immature = 1;
    }
    elseif ($selected_value == 'adult') {
      $adult = 1;
    }
  }

  // Fetch image details.
  $width = 0;
  $height = 0;
  $filesize = 0;
  $image_data = $wrapper->field_bgimage_image->value();
  if (!empty($image_data)) {
    $width = $image_data['width'];
    $height = $image_data['height'];
    // Oopsie, the field does not store the filesize.
  }

  $fields = array(
    'nid' => $node->nid,
    'parent' => $wrapper->field_parent->value(),
    'parent_idx' => $wrapper->field_parent->value() . ',',
    'id' => $wrapper->field_bgimage_id->value(),
    'date_taken' => $wrapper->field_bgimage_date->value(),
    'width' => $width,
    'height' => $height,
    'filesize' => $filesize,
    'weight' => 0,
    'representative' => 0,
    'male' => $male,
    'female' => $female,
    'adult' => $adult,
    'immature' => $immature,
    'size' => $wrapper->field_bgimage_size->value(),
    'owner' => $wrapper->field_bgimage_copyright_owner->value(),
    'county' => $wrapper->field_bgimage_county->value(),
  );

  return $fields;
}

/**
 * Modify paths of derivative images.
 *
 * @param string $result
 *   $result = $scheme . '://styles/' . $style_name . '/' . $scheme . '/' . $path;
 * @param unknown_type $context
 *   $context = array(
 *     'style_name' => $style_name,
 *     'uri' => $uri,
 *     'scheme' => $scheme,
 *     'path' => $path,
 *   );
 */
function bgimage_image_style_path_alter(&$style_path, $context) {
  // Only modify path if a derivative of a raw image was requested, like
  // raw/ELI/RTZ/ELIRTZ8RTL8RZH4ROLXZALIZNLYLCZQRYZMRFZ0RCZIROZRZCLMZRH0RFZFL3ZRZOZ.jpg
  if (substr($context['path'], 0, 4) != 'raw/') {
    return;
  }

  $s = pathinfo($context['path'], PATHINFO_FILENAME);
  // 7H3HEHUZ6H3HMLUZ8LWZUHLRUHVZMLZR5LAZ8LUZ6HBH0L6Z4H6ZLLOHIHBHQL5Z8H

  $uuid = image_deobfuscate($s);
  // faed59f39f56052153b48643f20ee94e

  $path = image_obfuscate($uuid . ',' . $context['style_name']) . '.jpg';
  // NH8ZYZMZZHIZOZZRILVZQLVHQLEZSL1HXHCHIHYHNHAZ8LNZMLUZGLAZIL1Z2HAHMH2ZGLUZUH9Z2H1Z.jpg

  $prefix = bgimage_get_prefix($path);
  // NH8/ZYZ/

  $style_path = $context['scheme'] . '://styles/' . $context['style_name'] . '/' . $context['scheme'] . '/' . $prefix . $path;
  // public://styles/medium/public/NH8/ZYZ/NH8ZYZMZZHIZOZZRILVZQLVHQLEZSL1HXHCHIHYHNHAZ8LNZMLUZGLAZIL1Z2HAHMH2ZGLUZUH9Z2H1Z.jpg
}

/**
 * Given URI of a derivative, return URI of original.
 */
function bgimage_original_from_derivative_path($scheme, $target) {
  // Only attempt to get original URI for scalable targets like
  // NH8/ZYZ/NH8ZYZMZZHIZOZZRILVZQLVHQLEZSL1HXHCHIHYHNHAZ8LNZMLUZGLAZIL1Z2HAHMH2ZGLUZUH9Z2H1Z.jpg
  if (strlen($target) < 8 || $target[3] != '/' || $target[7] != '/') {
    // Stock Drupal image_uri.
    return $scheme . '://' . $target;
  }

  $s = pathinfo($target, PATHINFO_FILENAME);
  // NH8ZYZMZZHIZOZZRILVZQLVHQLEZSL1HXHCHIHYHNHAZ8LNZMLUZGLAZIL1Z2HAHMH2ZGLUZUH9Z2H1Z

  $info = image_deobfuscate($s);
  // faed59f39f56052153b48643f20ee94e,medium

  $parts = explode(',', $info);
  $uuid = array_shift($parts);
  // faed59f39f56052153b48643f20ee94e

  $obfuscated = image_obfuscate($uuid);
  // ELIRTZ8RTL8RZH4ROLXZALIZNLYLCZQRYZMRFZ0RCZIROZRZCLMZRH0RFZFL3ZRZOZ

  $prefix = bgimage_get_prefix($obfuscated);
  // ELI/RTZ/

  return $scheme . '://' . 'raw/' . $prefix . $obfuscated . '.jpg';
  // public://raw/ELI/RTZ/ELIRTZ8RTL8RZH4ROLXZALIZNLYLCZQRYZMRFZ0RCZIROZRZCLMZRH0RFZFL3ZRZOZ.jpg
}

/**
 * Given a nid return a comma-delimited string of parents.
 *
 * @param int $nid
 * @return string e.g., 52,124,2234,32234
 */
function bgimage_get_full_parent($nid) {
  $parent = db_query("SELECT parent FROM {bgimage} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  return $parent;
}

/**
 * Implements hook_clone_node_alter().
 *
 * @param $node
 *   Reference to the fully loaded node object being saved (the clone) that
 *   can be altered as needed.
 * @param array $context
 *   An array of context describing the clone operation. The keys are:
 *   - 'method' : Can be either 'prepopulate' or 'save-edit'.
 *   - 'original_node' : The original fully loaded node object being cloned.
 *
 * @see clone_node_save()
 * @see drupal_alter()
 */
function bgimage_clone_node_alter(&$node, $context) {
  if ($context['method'] == 'prepopulate') {
    // Don't prepopulate the image field.
    $node->field_bgimage_image = array(LANGUAGE_NONE => array());
    // Remove "Clone of".
    $node->title = str_replace('Clone of ', '', $node->title);
    // Add the original nid in order to update bgimage_series.
    $node->original_nid = $context['original_node']->nid;
  }
}

/**
 * Altered menu title callback for cloning a bgimage node.
 */
function _bgimage_clone_action_link_title($node) {
  // A hack to present a shorter title in contextual links.
  if (current_path() != 'node/' . $node->nid) {
    return t('Clone');
  }
  if (variable_get('clone_use_node_type_name', 0)) {
    return t('Clone this !type', array('!type' => drupal_strtolower(node_type_get_name($node))));
  }
  return t('Add image');
}

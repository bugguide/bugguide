services:
  php:
    # Use PHP 7.3 with Apache to serve the Drupal site
    image: tugboatqa/php:7.3-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and enable mod-rewrite.
        #- docker-php-ext-install opcache
        - a2enmod headers rewrite

        # Install drush 8.1.17
        - composer --no-ansi global require drush/drush:8.1.17
        - ln -sf ~/.composer/vendor/bin/drush /usr/local/bin/drush

        # Link the document root to the expected path. This example links
        # /docroot to the docroot
        - ln -snf "${TUGBOAT_ROOT}" "${DOCROOT}"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings
        #- cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Copy the files directory from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        - mkdir -p "${DOCROOT}/files"
        - mkdir -p "${DOCROOT}/sites/default/files"

        # Set file permissions such that Drupal will not complain
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        - chgrp -R www-data "${DOCROOT}/files"
        - find "${DOCROOT}/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - drush -y -r "${DOCROOT}" si bioguide -v "--db-url=mysql://tugboat:tugboat@mysql/tugboat" --site-name=BugGuide --account-name=admin install_configure_form.update_status_module='array(FALSE,FALSE)'
        - drush -y -r "${DOCROOT}" en entityreference
        - drush -y -r "${DOCROOT}" en bg
        - drush -y -r "${DOCROOT}" en php better_formats views views_ui forum bgapi bgsubscriptions
        - drush -y -r "${DOCROOT}" en bgusers
        - drush -y -r "${DOCROOT}" features-revert-all --force
        - drush -y -r "${DOCROOT}" en bugguide
        - drush -y -r "${DOCROOT}" vset date_default_timezone "America/Chicago"
        - drush -y -r "${DOCROOT}" vset configurable_timezones 1
        - drush -y -r "${DOCROOT}" vset empty_timezone_message 1
        - drush -y -r "${DOCROOT}" vset user_default_timezone "2"
        - drush -y -r "${DOCROOT}" vset image_allow_insecure_derivatives 1
        - drush -y -r "${DOCROOT}" vset views_ui_show_advanced_help_warning 0
        - drush -y -r "${DOCROOT}" vset ds_extras_hide_page_title 1
        - drush -y -r "${DOCROOT}" vset file_public_path "files"
        - drush -r "${DOCROOT}" cache-clear all
        - drush -y -r "${DOCROOT}" updb
        - drush -r "${DOCROOT}" user-create authenticated --mail=authenticated@example.com --password="${TESTINGPASS}"
        - drush -r "${DOCROOT}" user-create editor --mail=contributor_editor@example.com --password="${TESTINGPASS}"
        - drush -r "${DOCROOT}" user-create senioreditor --mail=senior_editor@example.com --password="${TESTINGPASS}"
        - drush -r "${DOCROOT}" user-create expert --mail=expert@example.com --password="${TESTINGPASS}"
        - drush -r "${DOCROOT}" user-create administrator --mail=administrator@example.com --password="${TESTINGPASS}"
        - # Assign roles
        - drush -r "${DOCROOT}" user-add-role "senior editor" senioreditor
        - drush -r "${DOCROOT}" user-add-role "contributing editor" editor
        - drush -r "${DOCROOT}" user-add-role "administrator" administrator
        - drush -r "${DOCROOT}" user-add-role "expert" expert
        - drush -r "${DOCROOT}" sql-query "UPDATE menu_links SET hidden = 1 WHERE link_path REGEXP '^user/logout$';"
        - drush -r "${DOCROOT}" sql-query "UPDATE menu_links SET hidden = 1 WHERE link_title REGEXP '^My account$';"
        - drush -r "${DOCROOT}" sqlq "UPDATE block SET status = 0 WHERE delta = 'powered-by'"
        - drush -r "${DOCROOT}" sqlq "UPDATE block SET status = 0 WHERE delta = 'powered-by' AND theme REGEXP '^bulma'"
        - drush -r "${DOCROOT}" sqlq "UPDATE block SET status = 0 WHERE delta = 'login' AND theme REGEXP '^bulma'"
        - drush -r "${DOCROOT}" sqlq "UPDATE block SET status = 0 WHERE delta = 'navigation' AND theme REGEXP '^bulma'"
        - drush -r "${DOCROOT}" sqlq "UPDATE block SET status = 0 WHERE delta = 'bg_visual_guide' AND theme NOT REGEXP '^bulma'"
        - # Seed initial nodes and start tree.
        - drush -r "${DOCROOT}" scr "${DOCROOT}/.tugboat/initialnodes.php"

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/percona:5.7

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        #
